# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: pyproject.toml
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine pytest ruff
        pip install -e .
    - name: Lint with ruff
      run: |
        ruff check .
    - name: Test with pytest
      run: |
        pytest -q
    - name: Build package (sdist + wheel)
      run: |
        python -m build
    - name: Twine check
      run: |
        python -m twine check dist/*
    - name: Verify wheel contents (only ap2)
      run: |
        python - << 'PY'
        import glob, zipfile, sys
        ok = True
        for whl in glob.glob('dist/*.whl'):
            with zipfile.ZipFile(whl) as z:
                names = z.namelist()
                bad = [n for n in names if n.startswith(('examples/', 'docs_ap2/', 'AP2-main/'))]
                if bad:
                    print('Forbidden content in', whl, ':', bad[:10])
                    ok = False
        sys.exit(0 if ok else 1)
        PY
    - name: Upload dist artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ matrix.python-version }}
        path: dist/*

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: pyproject.toml
    - name: Build package
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
        python -m build
        python -m twine check dist/*
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/*
